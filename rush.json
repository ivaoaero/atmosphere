{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.112.1",
  "pnpmVersion": "8.12.0",
  "nodeSupportedVersionRange": ">=18.15.0",
  /**
   * Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early
   * days there was no standard and hardly any enforcement.  A few large legacy projects are still using
   * nonstandard package names, and private registries sometimes allow it.  Set "allowMostlyStandardPackageNames"
   * to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may
   * relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation
   * characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax
   * the rules too much it is likely to cause very confusing malfunctions.
   *
   * The default value is false.
   */
  // "allowMostlyStandardPackageNames": true,

  "approvedPackagesPolicy": {
    "reviewCategories": [
      "brand",
      "tools",
      "react"
    ],
    "ignoredNpmScopes": [
      "@types"
    ]
  },
  "gitPolicy": {
    "allowedEmailRegExps": [
      "[^@]+@users\\.noreply\\.github\\.com",
      ".+@ivao\\.aero"
    ],
    "sampleEmail": "your.name@ivao.aero",
    "versionBumpCommitMessage": "chore(deps): bump versions [skip ci]",
    "changeLogUpdateCommitMessage": "docs(changelog): update changelogs [skip ci]",
    "changefilesCommitMessage": "feat: rush change"
  },
  "repository": {
    "url": "git@github.com:ivaoaero/atmosphere.git",
    "defaultBranch": "develop",
    "defaultRemote": "origin"
  },
  "eventHooks": {
    "preRushInstall": [],
    "postRushInstall": [],
    "preRushBuild": [],
    "postRushBuild": [],
    "preRushx": [],
    "postRushx": []
  },
  "variants": [],
  "telemetryEnabled": false,
  "ensureConsistentVersions": true,
  /**
   * Allows creation of hotfix changes. This feature is experimental so it is disabled by default.
   * If this is set, 'rush change' only allows a 'hotfix' change type to be specified. This change type
   * will be used when publishing subsequent changes from the monorepo.
   */
  // "hotfixChangeEnabled": false,

  /**
    * This is an optional, but recommended, list of allowed tags that can be applied to Rush projects
    * using the "tags" setting in this file.  This list is useful for preventing mistakes such as misspelling,
    * and it also provides a centralized place to document your tags.  If "allowedProjectTags" list is
    * not specified, then any valid tag is allowed.  A tag name must be one or more words
    * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,
    * ".", and "@" characters.
    */
  // "allowedProjectTags": [ "tools", "frontend-team", "1.0.0-release" ],

  "projects": [
    //    {
    /**
     * The NPM package name of the project (must match package.json)
     */
    //      "packageName": "my-app",
    /**
     * The path to the project folder, relative to the rush.json config file.
     */
    //      "projectFolder": "apps/my-app",
    /**
     * An optional category for usage in the "browser-approved-packages.json"
     * and "nonbrowser-approved-packages.json" files.  The value must be one of the
     * strings from the "reviewCategories" defined above.
     */
    //      "reviewCategory": "production",
    /**
     * A list of Rush project names that are to be installed from NPM
     * instead of linking to the local project.
     *
     * If a project's package.json specifies a dependency that is another Rush project
     * in the monorepo workspace, normally Rush will locally link its folder instead of
     * installing from NPM.  If you are using PNPM workspaces, this is indicated by
     * a SemVer range such as "workspace:^1.2.3".  To prevent mistakes, Rush reports
     * an error if the "workspace:" protocol is missing.
     *
     * Locally linking ensures that regressions are caught as early as possible and is
     * a key benefit of monorepos.  However there are occasional situations where
     * installing from NPM is needed.  A classic example is a cyclic dependency.
     * Imagine three Rush projects: "my-toolchain" depends on "my-tester", which depends
     * on "my-library".  Suppose that we add "my-toolchain" to the "devDependencies"
     * of "my-library" so it can be built by our toolchain.  This cycle creates
     * a problem -- Rush can't build a project using a not-yet-built dependency.
     * We can solve it by adding "my-toolchain" to the "decoupledLocalDependencies"
     * of "my-library", so it builds using the last published release.  Choose carefully
     * which package to decouple; some choices are much easier to manage than others.
     *
     * (In older Rush releases, this setting was called "cyclicDependencyProjects".)
     */
    //      "decoupledLocalDependencies": [
    // "my-toolchain"
    //      ]

    /**
     * If true, then this project will be ignored by the "rush check" command.
     * The default value is false.
     */
    // "skipRushCheck": false,

    /**
     * A flag indicating that changes to this project will be published to npm, which affects
     * the Rush change and publish workflows. The default value is false.
     * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
     */
    // "shouldPublish": false,

    /**
     * Facilitates postprocessing of a project's files prior to publishing.
     *
     * If specified, the "publishFolder" is the relative path to a subfolder of the project folder.
     * The "rush publish" command will publish the subfolder instead of the project folder.  The subfolder
     * must contain its own package.json file, which is typically a build output.
     */
    // "publishFolder": "temp/publish",

    /**
     * An optional version policy associated with the project.  Version policies are defined
     * in "version-policies.json" file.  See the "rush publish" documentation for more info.
     * NOTE: "versionPolicyName" and "shouldPublish" are alternatives; you cannot specify them both.
     */
    // "versionPolicyName": "",

    /**
     * An optional set of custom tags that can be used to select this project.  For example,
     * adding "my-custom-tag" will allow this project to be selected by the
     * command "rush list --only tag:my-custom-tag".  The tag name must be one or more words
     * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,
     * ".", and "@" characters.
     */
    // "tags": [ "1.0.0-release", "frontend-team" ]
    //    },
    {
      "packageName": "@ivaoaero/prettier-config",
      "projectFolder": "tools/prettier",
      "reviewCategory": "tools",
      "shouldPublish": true
    },
    {
      "packageName": "@ivaoaero/eslint-config",
      "projectFolder": "tools/eslint",
      "reviewCategory": "tools",
      "shouldPublish": true
    },
    {
      "packageName": "@ivaoaero/atmosphere-brand",
      "projectFolder": "brand",
      "reviewCategory": "brand",
      "shouldPublish": true
    },
    {
      "packageName": "@ivaoaero/atmosphere-react",
      "projectFolder": "components/react",
      "reviewCategory": "react",
      "shouldPublish": true
    }
  ]
}
